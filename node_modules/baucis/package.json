{
  "name": "baucis",
  "version": "0.4.7",
  "main": "index.js",
  "scripts": {
    "test": "mocha --bail --globals vegetables"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/wprl/baucis.git"
  },
  "license": "MIT",
  "description": "Baucis is Express middleware that creates configurable REST APIs using Mongoose schemata.",
  "keywords": [
    "REST",
    "API",
    "express",
    "mongoose",
    "schema",
    "schemata",
    "mongo"
  ],
  "devDependencies": {
    "mocha": "~1.8.2"
  },
  "dependencies": {
    "lingo": "0.0.5",
    "express": "~3.1.0",
    "mongoose": "~3.6.2"
  },
  "readme": "baucis v0.4.7\n===============\n\nBaucis is Express middleware that creates configurable REST APIs using Mongoose schemata.\n\nLike Baucis and Philemon of old, this library provides REST to the weary traveler.  The goal is to create a JSON REST API for Mongoose & Express that matches as closely as possible the richness and versatility of the [HTTP 1.1 protocol](http://www.w3.org/Protocols/rfc2616/rfc2616.html).\n\nThose versions published to npm represent release versions.  Those versions not published to npm are development releases.\n\nRelase versions of baucis can be considered stable.  Baucis uses [semver](http://semver.org).\n\nPlease report issues on GitHub if bugs are encountered.\n\n![David Rjckaert III - Philemon and Baucis Giving Hospitality to Jupiter and Mercury](http://github.com/wprl/baucis/raw/master/david_rijckaert_iii-philemon_and_baucis.jpg \"Hermes is like: 'Hey Baucis, don't kill that goose.  And thanks for the REST.'\")\n\n*David Rijckaert - Philemon and Baucis Giving Hospitality to Jupiter and Mercury*\n\nUsage\n-----\n\nTo install:\n\n    npm install baucis\n\nAn example of creating a REST API from a couple Mongoose schemata:\n\n    var Vegetable = new mongoose.Schema({\n      name: String\n    });\n\n    var Fruit = new mongoose.Schema({\n      name: String\n    });\n\n    // Note that Mongoose middleware will be executed as usual\n    Vegetable.pre('save', function () { ... });\n\n    // Register the schemata\n    mongoose.model('vegetable', Vegetable);\n    mongoose.model('fruit', Fruit);\n\n    // Create the API routes\n    baucis.rest({\n      singular: 'vegetable',\n    });\n\n    baucis.rest({\n      singular: 'fruit'\n    });\n\n    // Create the app and listen for API requests\n    var app = express();\n    app.use('/api/v1', baucis());\n    app.listen(80);\n\nLater, make requests:\n\n| HTTP Verb     | /vegetables   | /vegetables/:id |\n| ------------- | ------------- | --------------- |\n| GET           | Get all or a subset of documents | Get the addressed document |\n| POST          | Creates new documents and sends them back.  You may post a single document or an array of documents.      | n/a |\n| PUT           | n/a | Update the addressed document |\n| DELETE        | Delete all or a subset of documents | Delete the addressed object |\n\nHTTP Headers\n------------\n\n| Header Field | Notes |\n| ------------ | ----- |\n| ETag | Supported out-of-the-box by Express. |\n| Last-Modified | Can be set automatically by Baucis.  Pass `lastModified: 'foo'` to `baucis.rest` in order to set the path to be used (currently it must be a `Date`). GET requests to the collection set this to the latest date out of all documents returned by the query.\n| Accept | Set to `application/json`  for all responses. |\n| Allow | Set automatically, correctly removing HTTP verbs when those verbs have been disabled by e.g. passing `put: false` to `baucis.rest`. |\n| Location | Set for PUT and POST responses. |\n| Link | If `relations: true` is passed to `baucis.rest`, this header will be set with various related links for all responses. |\n\n\nExamples\n--------\n\n * [Examples with Backbone](examples/Backbone.js)\n * [Examples with jQuery](examples/jQuery.js)\n\nQuery Options\n-------------\n\n| Name | Description |\n| ---- | ----------- |\n| conditions | Set the Mongoose query's `find` or `remove` arguments |\n| skip | Don't send the first *n* matched documents in the response |\n| limit | Limit the response document count to *n* |\n| select | Set which fields should be selected for response documents |\n| sort | Sort response documents by the given criteria.  `sort: 'foo -bar'`' sorts the collection by `foo` in ascending order, then by `bar` in descending order. |\n| populate | Set which fields should be populated for response documents.  See the Mongoose [population documentation](http://mongoosejs.com/docs/populate.html) for more information. |\n\nIt is not permitted to use the `select` query option or the `select` option of `populate` with a `+path`.  This is to allow a mechanism for hiding fields from client software.\n\nYou can deselect paths in the schema definition using `select: false` or in the controller options using `select: '-foo'` and your server middleware will able to select these fields as usual using `query.select`, while preventing the client from selecting the field.\n\n`bacuis.rest`\n-------------\n\nUse plain old Connect/Express middleware, including pre-existing modules like `passport`.  For example, set the `all` option to add middleware to be called before all the model's API routes.\n\n    baucis.rest({\n      singular: 'vegetable',\n      all: function (request, response, next) {\n        if (request.isAuthenticated()) return next();\n        return response.send(401);\n      }\n    });\n\nOr, set some middleware for specific HTTP verbs or disable verbs completely:\n\n    baucis.rest({\n      singular: 'vegetable',\n      get: [middleware1, middleware2],\n      post: middleware3,\n      del: false,\n      put: false\n    });\n\n`baucis.rest` returns an instance of the controller created to handle the schema's API routes.\n\n    var controller = baucis.rest({ ... });\n\nControllers are Express apps; they may be used as such.\n\n    var controller = baucis.rest({\n      singular: 'robot',\n      configure: function (controller) {\n        // Add middleware before all other rotues in the controller\n        controller.use(express.cookieParser());\n      }\n    });\n\n    // Add middleware after default controller routes\n    controller.use(function () { ... });\n    controller.set('some option name', 'value');\n    controller.listen(3000);\n\nController Options\n------------------\n\n| Name | Description |\n| ---- | ----------- |\n| singular | The name of the schema, as registered with `mongoose.model`. |\n| plural | This will be set automatically using the `lingo` module, but may be overridden by passing it into `baucis.rest`.\n| basePath | Defaults to `/`.  Used for embedding a controller in another conroller. |\n| publish | Set to `false` to not publish the controller's endpoints when `baucis()` is called. |\n| select | Select or deselect fields for all queries |\n| findBy | Use another field besides `_id` for entity queries. |\n| lastModified | Set the `Last-Modified` HTTP header useing the given field.  Currently this field must be a `Date`. |\n| restrict | Alter the query based on request parameters. |\n| configure | Add middleware to the controller before generated paths. |\n\n    var subcontroller = baucis.rest({\n      singular: 'bar',\n      basePath: '/:fooId/bars',\n      publish: false,\n      select: 'foo +bar -password',\n      findBy: 'baz',\n      lastModified: 'modifiedDate',\n      restrict: function (query, request) {\n        // Only retrieve bars that are children of the given foo\n        query.where('parent', request.params.fooId);\n      }\n    });\n\n    var controller = baucis.rest({\n      singular: 'foo',\n      configure: function (controller) {\n        // Embed the subcontroller at /foos/:fooId/bars\n        controller.use(subcontroller);\n\n        // Embed arbitrary middleware at /foos/qux\n        controller.use('/qux', function (request, response, next) {\n          // Do something coolâ€¦\n          next();\n        });\n      }\n    });\n\nContact\n-------\n\n * http://kun.io/\n * @wprl\n\n&copy; 2012-2013 William P. Riley-Land\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wprl/baucis/issues"
  },
  "homepage": "https://github.com/wprl/baucis",
  "_id": "baucis@0.4.7",
  "_from": "baucis@~0.4.6"
}
